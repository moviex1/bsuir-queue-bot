<?php

namespace App\Commands;


use App\App;
use App\Telegram;
use Database\Entity\User;

class CommandHandler
{
    public function __construct(private CommandFactory $commandFactory, private Telegram $telegram)
    {
    }

    public function handleCommand(array $params)
    {
        $command = $this->commandFactory->createNewCommand($params['message']);
        if (!$command) {
            return;
        }
        $user = App::entityManager()->getRepository(User::class)->findOneByTgId($params['user_id']);
        if ($params['user_id'] != $params['chat_id']) {
            $this->telegram->sendMessage(
                $params['chat_id'],
                '<b>–í—ã–ø–æ–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –±–æ—Ç–∞!üòä</b>'
            );
            return;
        }
        if($params['message'] == '/start'){
            $command->execute();
            return;
        }
        if($params['message'] == '/help'){
            $command->execute();
            return;
        }

        if (!$user && $params['message'] != '/register') {
            $this->telegram->sendMessage(
                $params['chat_id'],
                '<b>–î–ª—è –Ω–∞—á–∞–ª–∞ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø—Ä–∏ –ø–æ–º–æ—â–∏ –∫–æ–º–∞–Ω–¥—ã /register</b>'
            );
            return;
        }

        $command->execute();
    }
}